<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tlf.creatorcourse.dao.taskexperiment.TaskExperimentProjectsMapper">
    <resultMap id="TaskExperimentProjectsResultMap" type="com.tlf.creatorcourse.entity.TaskExperimentProjects">
        <id property="id" column="id" javaType="java.lang.String"/>
        <result property="createdAt" column="created_at" javaType="java.sql.Timestamp"/>
        <result property="updatedAt" column="updated_at" javaType="java.sql.Timestamp"/>
        <result property="deletedAt" column="deleted_at" javaType="java.sql.Timestamp"/>
        <result property="taskExperimentId" column="task_experiment_id" javaType="java.lang.String"/>
        <result property="submitterId" column="submitter_id" javaType="java.lang.String"/>
        <result property="scenePath" column="scene_path" javaType="java.lang.String"/>
        <result property="simPath" column="sim_path" javaType="java.lang.String"/>
    </resultMap>

    <insert id="addTaskExperimentProjects">
        insert into task_experiment_projects(id, created_at, updated_at, deleted_at, task_experiment_id, submitter_id,
        scene_path, sim_path)
        values (#{id},now(),now(),null,#{taskExperimentId},#{submitterId},#{scenePath},#{simPath})
    </insert>

    <select id="queryTaskExperimentProjectsByAccountId" resultType="com.tlf.creatorcourse.po.ProjectPO">
       SELECT experiment_types.`name`,task_experiment_projects.id,task_experiment_projects.created_at,task_experiment_projects.updated_at,task_experiment_projects.deleted_at,
        task_experiment_projects.task_experiment_id,task_experiment_projects.submitter_id,task_experiment_projects.scene_path,task_experiment_projects.sim_path
        FROM task_experiments ,task_experiment_projects ,experiment_types ,task_experiment_templates
        WHERE task_experiments.id = task_experiment_projects.task_experiment_id AND
        task_experiments.template_id = task_experiment_templates.id AND
        task_experiment_templates.experiment_type_id = experiment_types.id AND
        submitter_id = #{submitterId} and task_experiment_id = #{taskExperimentId} and task_experiment_projects.deleted_at is null order by task_experiment_projects.updated_at desc limit #{offset},#{limit}
    </select>

    <select id="queryTotalTaskExperimentProjectsByAccountId" resultType="java.lang.Integer">
       select count(*) from task_experiment_projects where submitter_id = #{submitterId} and task_experiment_id = #{taskExperimentId} and deleted_at is null
    </select>

    <select id="queryTaskExperimentProjectsById" resultMap="TaskExperimentProjectsResultMap">
        select id, created_at, updated_at, deleted_at, task_experiment_id, submitter_id, scene_path, sim_path from
        task_experiment_projects
        where id = #{id} and deleted_at is null;
    </select>

    <update id="deleteTaskExperimentProjects">
        update task_experiment_projects set deleted_at = now() where id = #{id}
    </update>

    <update id="updateTaskExperimentProject">
        update task_experiment_projects set updated_at =now(), scene_path = #{scenePath},sim_path=#{simPath} where id = #{id}
    </update>

</mapper>