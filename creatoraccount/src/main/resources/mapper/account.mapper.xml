<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tlf.creatoraccount.dao.AccountMapper">

    <resultMap id="accountsResultMap" type="com.tlf.creatoraccount.pojo.Accounts">
        <id property="id" column="id" javaType="java.lang.String"/>
        <result property="createdAt" column="created_at" javaType="java.sql.Timestamp"/>
        <result property="updatedAt" column="updated_at" javaType="java.sql.Timestamp"/>
        <result property="deletedAt" column="deleted_at" javaType="java.sql.Timestamp"/>
        <result property="phone" column="phone" javaType="java.lang.String"/>
        <result property="pwd" column="pwd" javaType="java.lang.String"/>
        <result property="number" column="number" javaType="java.lang.String"/>
        <result property="name" column="name" javaType="java.lang.String"/>
        <result property="gender" column="gender" javaType="java.lang.String"/>
        <result property="age" column="age" javaType="java.lang.Integer"/>
        <result property="classes" column="classes" javaType="java.lang.String"/>
        <result property="email" column="email" javaType="java.lang.String"/>
    </resultMap>

    <resultMap id="classStudentResultMap" type="com.tlf.creatoraccount.po.ClassStudentPO">
        <id property="id" column="id" javaType="java.lang.String"/>
        <result property="name" column="name" javaType="java.lang.String"/>
        <result property="classesId" column="classes_id" javaType="java.lang.String"/>
        <result property="coursesId" column="courses_id" javaType="java.lang.String"/>
        <result property="className" column="class_name" javaType="java.lang.String"/>
    </resultMap>

    <!--根据手机号查用户信息-->
    <select id="queryAccountByPhone" resultMap="accountsResultMap">
         select id, created_at, updated_at, deleted_at, phone, pwd, number, name, gender, age, classes, email from accounts
         where phone = #{phone} and deleted_at is null;
    </select>

    <select id="queryAccountByPhoneOrNumber" resultMap="accountsResultMap">
         select id, created_at, updated_at, deleted_at, phone, pwd, number, name, gender, age, classes, email from accounts
         where phone = #{phone} or number = #{number} and deleted_at is null;
    </select>

    <select id="queryAccountByClass" resultMap="accountsResultMap">
        select id, created_at, updated_at, deleted_at, phone,  number, name, gender, age, classes, email from accounts
         where deleted_at is null and  classes= #{classes};
    </select>

    <!--添加用户-->
    <insert id="addAccount">
        insert into accounts(id, created_at, updated_at, deleted_at, phone, pwd, number, name, gender, age, classes, email) values
        (#{id},now(),now(),null,#{phone},#{pwd},#{number},#{name},#{gender},#{age},#{classes},#{email})
    </insert>

    <!--修改密码-->
    <update id="updatePassword">
        update accounts set updated_at = now(),pwd =#{pwd} where id = #{id};
    </update>

    <!--查询密码-->
    <select id="queryPwdById" resultMap="accountsResultMap">
        select id,phone,pwd from accounts where id = #{id}
    </select>

    <!--查询用户信息-->
    <select id="queryAccountById" resultMap="accountsResultMap">
         select id, created_at, updated_at, deleted_at,phone,number, name, gender, age, classes, email from accounts
         where id = #{id};
    </select>

    <!--修改用户信息-->
    <update id="updateAccount">
        update accounts set updated_at =now(),name = #{name},phone=#{phone},gender=#{gender},age=#{age},email=#{email} where id = #{id}
    </update>

    <!--删除用户-->
    <update id="deleteAccount">
        update accounts set deleted_at=now() where id=#{id}
    </update>

    <update id="updateAccountClass">
        update accounts set updated_at = now(),classes=#{classes} where id = #{id};
    </update>

    <update id="deleteAccountClass">
        update accounts set updated_at = now(),classes=null where classes=#{classes}
    </update>

    <update id="deleteAccountClassById">
        update accounts set updated_at = now(),classes=null where id=#{id}
    </update>

    <!--查询没有班级的学生-->
    <select id="selectStudentNoClass" resultMap="accountsResultMap">
        select id,phone,number, name from accounts where deleted_at is null and classes is null;
    </select>

    <select id="selectAccounts" resultMap="accountsResultMap">
      SELECT accounts.id,accounts.phone,accounts.number,accounts.`name`,accounts.gender,accounts.age,accounts.email,accounts.classes
      FROM accounts ,roles ,accounts_and_roles
      WHERE accounts.id = accounts_and_roles.accounts_id AND
      accounts.deleted_at IS null AND
      accounts_and_roles.deleted_at IS null AND
      roles.id = accounts_and_roles.roles_id AND
      roles.`name` = #{role}
      ORDER BY accounts.updated_at desc
      limit #{offset},#{limit}
    </select>

    <select id="selectCounts" resultType="java.lang.Integer">
        SELECT count(*)
      FROM accounts ,roles ,accounts_and_roles
      WHERE accounts.id = accounts_and_roles.accounts_id AND
      accounts.deleted_at IS null AND
      accounts_and_roles.deleted_at IS null AND
      roles.id = accounts_and_roles.roles_id AND
      roles.`name` = #{role}
    </select>

    <select id="selectAllNames" resultMap="accountsResultMap">
        select id,name from accounts where deleted_at is null;
    </select>

    <select id="selectStudentsByCourseId" resultMap="classStudentResultMap" parameterType="java.lang.String">
        SELECT
        classes.id classes_id,
        classes.`name` class_name,
        accounts.id,
        accounts.`name`
        FROM
        classes ,
        accounts
        WHERE
        classes.id = accounts.classes
        and classes.deleted_at is null and accounts.deleted_at is null
    </select>

    <select id="selectAllPhone" resultType="java.lang.String">
        select phone from accounts where deleted_at is null ;
    </select>

    <select id="selectPhoneApartSelf" resultType="java.lang.String">
        select phone from accounts where deleted_at is null and id &lt;&gt; #{id};
    </select>

    <select id="selectAllNumber" resultType="java.lang.String">
        select accounts.number from accounts where deleted_at is null and number is not null
    </select>

    <select id="selectStudentByClass" resultMap="accountsResultMap">
        select id,name,classes from accounts where deleted_at is null and  classes = #{classes}
    </select>
</mapper>